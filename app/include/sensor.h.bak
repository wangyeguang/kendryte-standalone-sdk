#ifndef _SENSOR_H
#define _SENSOR_H
#include "stdint.h"
#include "stdbool.h"

#define SENSOR_BUFFER_NUM 2

typedef struct framebuffer {
    int x,y;
    int w,h;
    int w_max, h_max;
    int u,v;
    int bpp;
#if CONFIG_MAIXPY_OMV_DOUBLE_BUFF
    bool double_buff;
	uint8_t* pixels[SENSOR_BUFFER_NUM];
	uint8_t* pix_ai[SENSOR_BUFFER_NUM];
#else
    uint8_t* pixels;
	uint8_t* pix_ai; //image 地址
#endif
} __attribute__((aligned(8))) framebuffer_t;

// Use this macro to get a pointer to the free SRAM area located after the framebuffer.
#if CONFIG_MAIXPY_OMV_DOUBLE_BUFF
#define MAIN_FB_PIXELS()    (MAIN_FB()->pixels[0] + fb_buffer_size())
#else
#define MAIN_FB_PIXELS()    (MAIN_FB()->pixels + fb_buffer_size())
#endif
typedef enum {
    PIXFORMAT_INVLAID = 0,
    PIXFORMAT_BAYER,     // 1BPP/RAW
    PIXFORMAT_RGB565,    // 2BPP/RGB565
    PIXFORMAT_YUV422,    // 2BPP/YUV422
    PIXFORMAT_GRAYSCALE, // 1BPP/GRAYSCALE
    PIXFORMAT_JPEG,      // JPEG/COMPRESSED
} pixformat_t;


typedef struct _sensor sensor_t;
typedef struct _sensor {
    uint16_t chip_id;           // Sensor ID.
    uint8_t  slv_addr;          // Sensor I2C slave address.
    uint8_t choice_dev;             // choice sensor device.
    uint16_t gs_bpp;            // Grayscale bytes per pixel.
    uint32_t hw_flags;          // Hardware flags (clock polarities/hw capabilities)
    bool     reset_set;         // reset called
    bool     size_set;          // set_framesie called
    bool     double_buff;

    uint32_t vsync_pin;         // VSYNC GPIO output pin.
    polarity_t pwdn_pol; // PWDN polarity (TODO move to hw_flags)
    polarity_t reset_pol; // Reset polarity (TODO move to hw_flags)

    // Sensor state
    sde_t sde;                  // Special digital effects
    pixformat_t pixformat;      // Pixel format
    framesize_t framesize;      // Frame size
    framerate_t framerate;      // Frame rate
    gainceiling_t gainceiling;  // AGC gainceiling
    bool hmirror;
    bool vflip;
/*
	GPIO_TypeDef *vsync_gpio;   // VSYNC GPIO output port.
*/
} sensor_t __attribute__((aligned (8)));

extern framebuffer_t *fb_framebuffer;

int sensor_init(uint32_t  freq, bool double_buff,uint32_t kpu_addr,uint32_t display_addr);



#endif // !_SENSOR_H